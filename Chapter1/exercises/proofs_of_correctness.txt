1-7: **Prove the correctness of the following recursive algorithm to multiply two
natural numbers, for all integer constants c ≥ 2.
function multiply(y,z)
	comment Return the product yz.
	1. if z = 0 then return(0) else
	2. return(multiply(cy, floor(z/c)) + y · (z mod c))**

	case 1: c = z
		multiply(y,z) = multiply(cy, floor(z/c)) + y · (z mod c)
					  = multiply(zy, floor(z/z)) + y · (z mod z)
					  = multiply(zy, 1) + y · (z mod z)
					  = multiply(zy, 1) 
					  = multiply(czy, floor(1/c)) + zy*(1 mod c) 
					  = multiply(zzy, floor(1/z)) + zy*(1 mod z) 
					  = multiply(zzy, 0) + zy*(1 mod z) 
					  = yz
					  OK!
					 

	case 2: c > z
		multiply(y,z) = multiply(cy, floor(z/c)) + y · (z mod c)
					  = multiply(cy, 0) + y · (z mod c)
					  = multiply(cy, 0) + y · (z mod c)
					  = yz
					  OK!


	case 3: c < z
		c >= 2
		z <= n //indutive hypothesis
		y >= 0
		base Case: z = 0, multiply(y,0) = 0 which is true
		lemma: we show that floor(z/c)*c + (z mod c) = z ::
			by the quotient remainder theorem z = cq + r
												= cq + z mod c
												.:
											z = floor(z/c)*c + (z mod c) (**1)
		Assuming the algorithm holds for all nums <= n we must show that multiply(y, n + 1) = y*(n+1)
			multiply(y, n + 1) = multiply(cy, floor((n+1)/c)) + y*((n+1) mod c)
			since c >= 2, floor((n+1)/c) < n + 1 :. the first term returns a valid result (based on our inductive hypothesis) so following the algorithm
			multiply(y, n + 1) = multiply(cy, floor((n+1)/c)) + y*((n+1) mod c) // let z` = n+1
							   = cy*floor((z`)/c) + y*((z`) mod c)
							   =y*(c*floor(z`/c) + (z` mod c)) 
							   and from (1)
							   = y*z`
							   = y*(n+1)
							   OK!



1-8: **Prove the correctness of the following algorithm for evaluating a polynomial.
P(x) = a{n}x^n + a{n−1}x^(n−1) + ... + a{1}x + a{0}
function horner(A, x)
	p = An
	for i from n − 1 to 0
	p = p ∗ x + Ai
	return p **



for polynomials of degree 0 P(x) = A0, which the algoritm satisfies.
assuming the algorithm holds for polyomials of degree <= n:
// A is an ordered set of coefficients of size n, [An, An-1....A0]
	horner(A,x) = P(x) = a{n}x^n + a{n−1}x^(n−1) + ... + a{1}x + a{0}
	
 we must show it holds for polynomials of degree n+1, ie
 // A` is an ordered set of coefficients of size n + 1, [An+1, An,....A0]

 	horner(A`,x) :
 		p=>
 			A`{n+1}
 			A`{n+1}*x + A`{n}
 			A`{n+1}*x^2 + A`{n}*x + A{`n-1}
 			.
 			.
 			.
 			A`{n+1}*x^(n+1) + A`{n}*x^n + ... + A`{1}*x + A`{0}
 			=
 			A`{n+1}*x^(n+1) + honer(A, x)

??? seems circular... define what we need to show better
	       


1-9: **Prove the correctness of the following sorting algorithm.
function bubblesort (A : list[1 ...n])
	var int i, j
	for i from n to 1
	for j from 1 to i − 1
	if (A[j] > A[j + 1])
	swap the values of A[j] and A[j + 1]**

base case is a list of two elements [a,b]    //we are indexing from 1 not 0 as usual
case 1: a > b
	i = 2
	j = 1
		if (A[1] > A[2]) = true
		swap and A = [b,a]
	i = 1
	j = 1
		if (A[1] > A[2]) = false
	so A = [b,a] and from our assumption that a > b for case 1 the algorithm is true	

case 2: a < b
	i = 2
	j = 1
		if (A[1] > A[2]) = false
	i = 1
	j = 1
		if (A[1] > A[2]) = false
	so A = [a,b] and from our assumption that a < b for case 2 the algorithm is true	

case 3: a = b
	the list is considered sorted regardless of how the algorithm may rearange its items

Now we procede with induction, assuming that for all lists of size <= n the algorithm returns a sorted list
We must show that for a list of size n+1, the algorithm returns an ordered list
that is function bubblesort (A : list[1 ...n, n+1])
	var int i, j
	for i from n+1 to 1
	for j from 1 to i − 1
	if (A[j] > A[j + 1])
	swap the values of A[j] and A[j + 1]

	the inner loop "bubbles up" the largest num to position i
	on the last j iteration of the first i iteration the altered set has n+1 elems with the largest element in position n+1
	now we have sort the rest of the list which is of size n. Our inductive hypothesis states we can do this